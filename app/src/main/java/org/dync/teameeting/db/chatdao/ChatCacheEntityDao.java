package org.dync.teameeting.db.chatdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHAT_CACHE_ENTITY.
 */
public class ChatCacheEntityDao extends AbstractDao<ChatCacheEntity, Long> {

    public static final String TABLENAME = "CHAT_CACHE_ENTITY";

    /**
     * Properties of entity ChatCacheEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Meetingid = new Property(1, String.class, "meetingid", false, "MEETINGID");
        public final static Property Userid = new Property(2, String.class, "userid", false, "USERID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Sendtime = new Property(4, String.class, "sendtime", false, "SENDTIME");
        public final static Property Isread = new Property(5, Boolean.class, "isread", false, "ISREAD");
    }

    ;


    public ChatCacheEntityDao(DaoConfig config) {
        super(config);
    }

    public ChatCacheEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_CACHE_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEETINGID' TEXT," + // 1: meetingid
                "'USERID' TEXT," + // 2: userid
                "'CONTENT' TEXT," + // 3: content
                "'SENDTIME' TEXT," + // 4: sendtime
                "'ISREAD' INTEGER);"); // 5: isread
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_CACHE_ENTITY'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatCacheEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String meetingid = entity.getMeetingid();
        if (meetingid != null) {
            stmt.bindString(2, meetingid);
        }

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(3, userid);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }

        String sendtime = entity.getSendtime();
        if (sendtime != null) {
            stmt.bindString(5, sendtime);
        }

        Boolean isread = entity.getIsread();
        if (isread != null) {
            stmt.bindLong(6, isread ? 1l : 0l);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ChatCacheEntity readEntity(Cursor cursor, int offset) {
        ChatCacheEntity entity = new ChatCacheEntity( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // meetingid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userid
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendtime
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isread
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ChatCacheEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeetingid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsread(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(ChatCacheEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(ChatCacheEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
